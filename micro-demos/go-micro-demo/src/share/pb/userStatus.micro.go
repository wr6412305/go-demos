// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userStatus.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserStatus service

type UserStatusService interface {
	//通过uid获取session
	GetSessionByUID(ctx context.Context, in *GetSessionByUIDReq, opts ...client.CallOption) (*GetSessionByUIDRep, error)
	//通过token获取session
	GetSessionByToken(ctx context.Context, in *GetSessionByTokenReq, opts ...client.CallOption) (*GetSessionByTokenRep, error)
	//获取用户的长连接地址
	GetConnectorAddr(ctx context.Context, in *GetConnectorAddrReq, opts ...client.CallOption) (*GetConnectorAddrRep, error)
	//更新用户长连接地址（用户建立长连接时调用)（备注：目前有没在用要问下其它服务的开发）
	UpdateConnectorAddr(ctx context.Context, in *UpdateConnectorAddrReq, opts ...client.CallOption) (*UpdateConnectorAddrRep, error)
	//构建session用户登录时调用，此接口会清除旧session
	NewSession(ctx context.Context, in *NewSessionReq, opts ...client.CallOption) (*NewSessionRep, error)
	//移除session登出时会调用
	RemoveSession(ctx context.Context, in *RemoveSessionReq, opts ...client.CallOption) (*RemoveSessionRep, error)
	//token续期
	RefreshSession(ctx context.Context, in *RefreshSessionReq, opts ...client.CallOption) (*RefreshSessionRep, error)
	//更新用户长连接地址（用户建立长连接时调用)
	UserConnected(ctx context.Context, in *UserConnectedReq, opts ...client.CallOption) (*UserConnectedRep, error)
	//删除用户的长连接地址（用户长连接断开时调用）
	UserDisonnected(ctx context.Context, in *UserDisonnectedReq, opts ...client.CallOption) (*UserDisonnectedRep, error)
	//通过uid来移除session
	RemoveSessionByUID(ctx context.Context, in *RemoveSessionByUIDReq, opts ...client.CallOption) (*RemoveSessionByUIDRep, error)
	//通过token找uid
	GetUserIDByToken(ctx context.Context, in *GetUserIDByTokenReq, opts ...client.CallOption) (*GetUserIDByTokenRep, error)
}

type userStatusService struct {
	c    client.Client
	name string
}

func NewUserStatusService(name string, c client.Client) UserStatusService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb"
	}
	return &userStatusService{
		c:    c,
		name: name,
	}
}

func (c *userStatusService) GetSessionByUID(ctx context.Context, in *GetSessionByUIDReq, opts ...client.CallOption) (*GetSessionByUIDRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.GetSessionByUID", in)
	out := new(GetSessionByUIDRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) GetSessionByToken(ctx context.Context, in *GetSessionByTokenReq, opts ...client.CallOption) (*GetSessionByTokenRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.GetSessionByToken", in)
	out := new(GetSessionByTokenRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) GetConnectorAddr(ctx context.Context, in *GetConnectorAddrReq, opts ...client.CallOption) (*GetConnectorAddrRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.GetConnectorAddr", in)
	out := new(GetConnectorAddrRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) UpdateConnectorAddr(ctx context.Context, in *UpdateConnectorAddrReq, opts ...client.CallOption) (*UpdateConnectorAddrRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.UpdateConnectorAddr", in)
	out := new(UpdateConnectorAddrRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) NewSession(ctx context.Context, in *NewSessionReq, opts ...client.CallOption) (*NewSessionRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.NewSession", in)
	out := new(NewSessionRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) RemoveSession(ctx context.Context, in *RemoveSessionReq, opts ...client.CallOption) (*RemoveSessionRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.RemoveSession", in)
	out := new(RemoveSessionRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) RefreshSession(ctx context.Context, in *RefreshSessionReq, opts ...client.CallOption) (*RefreshSessionRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.RefreshSession", in)
	out := new(RefreshSessionRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) UserConnected(ctx context.Context, in *UserConnectedReq, opts ...client.CallOption) (*UserConnectedRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.UserConnected", in)
	out := new(UserConnectedRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) UserDisonnected(ctx context.Context, in *UserDisonnectedReq, opts ...client.CallOption) (*UserDisonnectedRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.UserDisonnected", in)
	out := new(UserDisonnectedRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) RemoveSessionByUID(ctx context.Context, in *RemoveSessionByUIDReq, opts ...client.CallOption) (*RemoveSessionByUIDRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.RemoveSessionByUID", in)
	out := new(RemoveSessionByUIDRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) GetUserIDByToken(ctx context.Context, in *GetUserIDByTokenReq, opts ...client.CallOption) (*GetUserIDByTokenRep, error) {
	req := c.c.NewRequest(c.name, "UserStatus.GetUserIDByToken", in)
	out := new(GetUserIDByTokenRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserStatus service

type UserStatusHandler interface {
	//通过uid获取session
	GetSessionByUID(context.Context, *GetSessionByUIDReq, *GetSessionByUIDRep) error
	//通过token获取session
	GetSessionByToken(context.Context, *GetSessionByTokenReq, *GetSessionByTokenRep) error
	//获取用户的长连接地址
	GetConnectorAddr(context.Context, *GetConnectorAddrReq, *GetConnectorAddrRep) error
	//更新用户长连接地址（用户建立长连接时调用)（备注：目前有没在用要问下其它服务的开发）
	UpdateConnectorAddr(context.Context, *UpdateConnectorAddrReq, *UpdateConnectorAddrRep) error
	//构建session用户登录时调用，此接口会清除旧session
	NewSession(context.Context, *NewSessionReq, *NewSessionRep) error
	//移除session登出时会调用
	RemoveSession(context.Context, *RemoveSessionReq, *RemoveSessionRep) error
	//token续期
	RefreshSession(context.Context, *RefreshSessionReq, *RefreshSessionRep) error
	//更新用户长连接地址（用户建立长连接时调用)
	UserConnected(context.Context, *UserConnectedReq, *UserConnectedRep) error
	//删除用户的长连接地址（用户长连接断开时调用）
	UserDisonnected(context.Context, *UserDisonnectedReq, *UserDisonnectedRep) error
	//通过uid来移除session
	RemoveSessionByUID(context.Context, *RemoveSessionByUIDReq, *RemoveSessionByUIDRep) error
	//通过token找uid
	GetUserIDByToken(context.Context, *GetUserIDByTokenReq, *GetUserIDByTokenRep) error
}

func RegisterUserStatusHandler(s server.Server, hdlr UserStatusHandler, opts ...server.HandlerOption) error {
	type userStatus interface {
		GetSessionByUID(ctx context.Context, in *GetSessionByUIDReq, out *GetSessionByUIDRep) error
		GetSessionByToken(ctx context.Context, in *GetSessionByTokenReq, out *GetSessionByTokenRep) error
		GetConnectorAddr(ctx context.Context, in *GetConnectorAddrReq, out *GetConnectorAddrRep) error
		UpdateConnectorAddr(ctx context.Context, in *UpdateConnectorAddrReq, out *UpdateConnectorAddrRep) error
		NewSession(ctx context.Context, in *NewSessionReq, out *NewSessionRep) error
		RemoveSession(ctx context.Context, in *RemoveSessionReq, out *RemoveSessionRep) error
		RefreshSession(ctx context.Context, in *RefreshSessionReq, out *RefreshSessionRep) error
		UserConnected(ctx context.Context, in *UserConnectedReq, out *UserConnectedRep) error
		UserDisonnected(ctx context.Context, in *UserDisonnectedReq, out *UserDisonnectedRep) error
		RemoveSessionByUID(ctx context.Context, in *RemoveSessionByUIDReq, out *RemoveSessionByUIDRep) error
		GetUserIDByToken(ctx context.Context, in *GetUserIDByTokenReq, out *GetUserIDByTokenRep) error
	}
	type UserStatus struct {
		userStatus
	}
	h := &userStatusHandler{hdlr}
	return s.Handle(s.NewHandler(&UserStatus{h}, opts...))
}

type userStatusHandler struct {
	UserStatusHandler
}

func (h *userStatusHandler) GetSessionByUID(ctx context.Context, in *GetSessionByUIDReq, out *GetSessionByUIDRep) error {
	return h.UserStatusHandler.GetSessionByUID(ctx, in, out)
}

func (h *userStatusHandler) GetSessionByToken(ctx context.Context, in *GetSessionByTokenReq, out *GetSessionByTokenRep) error {
	return h.UserStatusHandler.GetSessionByToken(ctx, in, out)
}

func (h *userStatusHandler) GetConnectorAddr(ctx context.Context, in *GetConnectorAddrReq, out *GetConnectorAddrRep) error {
	return h.UserStatusHandler.GetConnectorAddr(ctx, in, out)
}

func (h *userStatusHandler) UpdateConnectorAddr(ctx context.Context, in *UpdateConnectorAddrReq, out *UpdateConnectorAddrRep) error {
	return h.UserStatusHandler.UpdateConnectorAddr(ctx, in, out)
}

func (h *userStatusHandler) NewSession(ctx context.Context, in *NewSessionReq, out *NewSessionRep) error {
	return h.UserStatusHandler.NewSession(ctx, in, out)
}

func (h *userStatusHandler) RemoveSession(ctx context.Context, in *RemoveSessionReq, out *RemoveSessionRep) error {
	return h.UserStatusHandler.RemoveSession(ctx, in, out)
}

func (h *userStatusHandler) RefreshSession(ctx context.Context, in *RefreshSessionReq, out *RefreshSessionRep) error {
	return h.UserStatusHandler.RefreshSession(ctx, in, out)
}

func (h *userStatusHandler) UserConnected(ctx context.Context, in *UserConnectedReq, out *UserConnectedRep) error {
	return h.UserStatusHandler.UserConnected(ctx, in, out)
}

func (h *userStatusHandler) UserDisonnected(ctx context.Context, in *UserDisonnectedReq, out *UserDisonnectedRep) error {
	return h.UserStatusHandler.UserDisonnected(ctx, in, out)
}

func (h *userStatusHandler) RemoveSessionByUID(ctx context.Context, in *RemoveSessionByUIDReq, out *RemoveSessionByUIDRep) error {
	return h.UserStatusHandler.RemoveSessionByUID(ctx, in, out)
}

func (h *userStatusHandler) GetUserIDByToken(ctx context.Context, in *GetUserIDByTokenReq, out *GetUserIDByTokenRep) error {
	return h.UserStatusHandler.GetUserIDByToken(ctx, in, out)
}
