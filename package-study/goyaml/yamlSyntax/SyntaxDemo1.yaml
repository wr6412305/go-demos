# 即表示url属性值
url: http://localhost:8080/
# 即表示server.host属性的值
server:
    host: http://localhost:8080/

# 数组, 即表示server为[a,b,c]
server: 
    - 120.168.117.21
    - 120.168.117.22
    - 120.168.117.23
  
# 常量
pi: 3.14    # number
hasChild: true  # boolean
name: 'hello YAML'  # string

# 意思是companies属性是一个数组，每一个数组元素又是由id,name,price三个属性构成
companies:
    - 
        id: 1
        name: company1
        price: 200w
    - 
        id: 2
        name: company2
        price: 500w

# 数组也可以使用流式(flow)的方式表示
companies: [{id: 1,name: company1,price: 200W},{id: 2,name: company2,price: 500W}]

# 常量
boolean:
    - true    #true,True都可以
    - false   #false，False都可以

float:
    - 3.14
    - 6.8523015e+5 #可以使用科学计数法

int:
    - 123
    - 0b1010_0111_0100_1010_1110    #二进制表示

null:
    nodename: 'node'
    parent: ~  #使用~表示null

string:
    - 哈哈
    - 'hello world' #可以使用双引号或者单引号包裹特殊字符
    - newline
      newline2 #字符串可以拆成多行，每一行会被转化成一个空格

date:
    - 2019-03-19    #日期必须使用ISO 8601格式，即yyyy-MM-dd

datetime:
    - 2019-03-19T12:01:31+08:00 #时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区

# !! YAML中使用!!做类型强行转换
string:
    - !!str 54321
    - !!str true

# >在字符串中折叠换行，| 保留换行符
accomplishment: >
 Mark set a major league
 hoem run record in 1998.
stats: |
 65 Home Runs
 0.278 Batting Average
# 那么结果是
# stats=65 Home Runs
#  0.278 Batting Average,
# 即| 符号保留了换行符，而accomplishment的结果为：
# accomplishment=Mark set a major league home run record in 1998.
# 即将换行符转化成了空格；要注意一点的是，每行的文本前一定要有一个空格

# 引用。重复的内容在YAML中可以使用&来完成锚点定义，使用*来完成锚点引用
# &用来建立锚点SS，<<表示合并到当前数据，*用来引用锚点
hr:
    - Mark McGwire
    - &SS Sammy Sosa
rbi:
    - *SS 
    - Ken Griffey
# 可以看到，在hr中，使用&SS为Sammy Sosa设置了一个锚点（引用），名称为SS，在rbi中，使用*SS完成了锚点使用，那么结果为
# {rbi=[Sammy Sosa, Ken Griffey], hr=[Mark McGwire, Sammy Sosa]}

merge:
    - &CENTER { x: 1, y: 2 }
    - &LEFT { x: 0, y: 2 }
    - &BIG { r: 10 }
    - &SMALL { r: 1 }
  
sample1: 
    <<: *CENTER
    r: 10
    
sample2:
    << : [ *CENTER, *BIG ]
    other: haha
    
sample3:
    << : [ *CENTER, *BIG ]
    r: 100

# 在merge中，定义了四个锚点，分别在sample中使用。
# sample1中，<<: *CENTER意思是引用{x: 1,y: 2}，并且合并到sample1中，那么合并的结果为：sample1={r=10, y=2, x=1}
# sample2中，<<: [*CENTER, *BIG] 意思是联合引用{x: 1,y: 2}和{r: 10}，并且合并到sample2中，那么合并的结果为：sample2={other=haha, x=1, y=2, r=10}
# sample3中，引入了*CENTER, *BIG，还使用了r: 100覆盖了引入的r: 10，所以sample3值为：sample3={r=100, y=2, x=1}
# 有了合并，我们就可以在配置中，把相同的基础配置抽取出来，在不同的子配置中合并引用即可

# "? " 问号+空格表示复杂的键。当键是一个列表或键值表时，就需要使用本符号来标记
# 使用一个列表作为键
? [blue, reg, green]: Color
# 等价于
? - blue
  - reg
  - green
: Color